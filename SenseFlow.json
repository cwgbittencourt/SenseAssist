{"id":"6d45b395-d838-4783-9a21-5894f42362f0","data":{"nodes":[{"id":"ComposioAPI-WfTao","type":"genericNode","position":{"x":1616.0358184434585,"y":277.234375},"data":{"type":"ComposioAPI","node":{"template":{"_type":"Component","action_names":{"trace_as_metadata":true,"options":["WEATHERMAP_WEATHER"],"combobox":false,"list":true,"required":false,"placeholder":"","show":true,"name":"action_names","value":["WEATHERMAP_WEATHER"],"display_name":"Actions to use","advanced":false,"dynamic":false,"info":"The actions to pass to agent to execute","title_case":false,"type":"str","_input_type":"MultiselectInput"},"api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"Composio API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key","refresh_button":true,"title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"app_names":{"trace_as_metadata":true,"options":["APALEO","APIFY","ASANA","ATTIO","BITBUCKET","BREVO","BROWSERBASE_TOOL","BROWSER_TOOL","CLICKUP","CODEINTERPRETER","CODE_FORMAT_TOOL","CODE_GREP_TOOL","CODE_INDEX_TOOL","CODE_MAP_TOOL","COMPOSIO","DISCORD","DROPBOX","ELEVENLABS","EMBED_TOOL","EXA","FIGMA","FILETOOL","FIRECRAWL","GIT","GITHUB","GITLAB","GMAIL","GOOGLECALENDAR","GOOGLEDOCS","GOOGLEDRIVE","GOOGLEMEET","GOOGLESHEETS","GOOGLETASKS","GREPTILE","HACKERNEWS","HEROKU","HISTORY_FETCHER","HUBSPOT","IMAGE_ANALYSER","INDUCED_AI","JIRA","KLAVIYO","LINEAR","LISTENNOTES","MATHEMATICAL","MULTIONAI","NASA","NOTION","OKTA","PAGERDUTY","PERPLEXITYAI","PIPEDRIVE","POSTHOG","RAGTOOL","SCHEDULER","SERPAPI","SHELLTOOL","SLACK","SLACKBOT","SNOWFLAKE","SOUNDCLOUD","SPIDERTOOL","SPLITWISE","SPOTIFY","SQLTOOL","STRAVA","TASKADE","TAVILY","TRELLO","TWILIO","TWITTER","TYPEFORM","WEATHERMAP","WEBTOOL","WHATSAPP","WORKABLE","WORKSPACE_TOOL","YOUSEARCH","YOUTUBE","ZENDESK","ZEPTOOL","ZOOM"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"app_names","value":"WEATHERMAP","display_name":"App Name","advanced":false,"dynamic":false,"info":"The app name to use. Please refresh after selecting app name","refresh_button":true,"title_case":false,"type":"str","_input_type":"DropdownInput"},"auth_status_config":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"auth_status_config","value":"WEATHERMAP CONNECTED","display_name":"Auth status","advanced":false,"dynamic":false,"info":"Open link or enter api key. Then refresh button","refresh_button":true,"title_case":false,"type":"str","_input_type":"StrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"entity_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"entity_id","value":"default","display_name":"Entity ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Use Composio toolset to run actions with your agent","icon":"Composio","base_classes":["Data","Tool"],"display_name":"Composio Tools","documentation":"https://docs.composio.dev","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["entity_id","api_key","app_names","action_names","auth_status_config"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ComposioAPI-WfTao"},"selected":false,"width":384,"height":633},{"id":"Prompt-aktgV","type":"genericNode","position":{"x":1633.564493473209,"y":957.6958905443098},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{context}\nQuando algo for solicitado como vídeo, notícias atuais não forneça uma resposta genérica com links que levem a outro canal de informação. \nVocê deve fornecer a informação conforme detalhado abaixo.\nSe a pergunta é relacionada ao clima de uma cidade utilize o Composio  WHEATERMAP\nOu se a pesquisa estiver relacionada ao email utilize o Composio GMAIL\nOu caso ainda não tenha uma resposta utilize o Wikipedia\nOu caso o assunto seja sobre vídeo utilize o Composio YOUTUBE\nOu  se for o caso de buscar Notícias, utilize o Comosio SERPAPI_DUCK_DUCK_GO\nCaso contrário responda você mesmo\nSempre, e em todos os casos, Informe abaixo de cada resultado qual foi a ferramenta que forneceu a resposta.","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false,"lf_version":"1.0.18"},"id":"Prompt-aktgV"},"selected":false,"width":384,"height":416},{"id":"ToolCallingAgent-LmeiW","type":"genericNode","position":{"x":2891.7493369325916,"y":601.8462270391351},"data":{"type":"ToolCallingAgent","node":{"template":{"_type":"Component","chat_history":{"trace_as_metadata":true,"list":true,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"chat_history","value":"","display_name":"Chat History","advanced":false,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"DataInput"},"llm":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"llm","value":"","display_name":"Language Model","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"name":"tools","value":"","display_name":"Tools","advanced":false,"input_types":["Tool","BaseTool"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, List\n\nfrom langchain.agents import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate, HumanMessagePromptTemplate\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.inputs import MultilineInput\nfrom langflow.inputs.inputs import HandleInput, DataInput\nfrom langflow.schema import Data\n\n\nclass ToolCallingAgentComponent(LCToolsAgentComponent):\n    display_name: str = \"Tool Calling Agent\"\n    description: str = \"Agent that uses tools\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"ToolCallingAgent\"\n\n    inputs = LCToolsAgentComponent._base_inputs + [\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MultilineInput(\n            name=\"user_prompt\", display_name=\"Prompt\", info=\"This prompt must contain 'input' key.\", value=\"{input}\"\n        ),\n        DataInput(name=\"chat_history\", display_name=\"Chat History\", is_list=True, advanced=True),\n    ]\n\n    def get_chat_history_data(self) -> Optional[List[Data]]:\n        return self.chat_history\n\n    def create_agent_runnable(self):\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\"placeholder\", \"{chat_history}\"),\n            HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=[\"input\"], template=self.user_prompt)),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        return create_tool_calling_agent(self.llm, self.tools, prompt)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"handle_parsing_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"handle_parsing_errors","value":true,"display_name":"Handle Parse Errors","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"max_iterations":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_iterations","value":15,"display_name":"Max Iterations","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"system_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_prompt","value":"","display_name":"System Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System prompt for the agent.","title_case":false,"type":"str","_input_type":"MultilineInput"},"user_prompt":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"user_prompt","value":"{input}","display_name":"Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"This prompt must contain 'input' key.","title_case":false,"type":"str","_input_type":"MultilineInput"},"verbose":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"verbose","value":true,"display_name":"Verbose","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Agent that uses tools","icon":"LangChain","base_classes":["AgentExecutor","Message"],"display_name":"Tool Calling Agent","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["AgentExecutor"],"selected":"AgentExecutor","name":"agent","display_name":"Agent","method":"build_agent","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"response","display_name":"Response","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","handle_parsing_errors","verbose","max_iterations","tools","llm","system_prompt","user_prompt","chat_history"],"beta":true,"edited":false,"lf_version":"1.0.18"},"id":"ToolCallingAgent-LmeiW"},"selected":false,"width":384,"height":663,"dragging":false,"positionAbsolute":{"x":2891.7493369325916,"y":601.8462270391351}},{"id":"ChatInput-PUigP","type":"genericNode","position":{"x":2063.936369646493,"y":307.2382913159371},"data":{"type":"ChatInput","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"name":"files","value":"","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file","_input_type":"FileInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"traga transcrição resumida de vídeos da Natasha Romanof","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"User","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"User","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Get chat inputs from the Playground.","icon":"ChatInput","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","files"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ChatInput-PUigP"},"selected":false,"width":384,"height":302},{"id":"ChatOutput-y42uJ","type":"genericNode","position":{"x":3705.4168745041557,"y":767.0455813755043},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"data_template","value":"{text}","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"sender","value":"Machine","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sender_name","value":"AI","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"session_id","value":"","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"should_store_message","value":true,"display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ChatOutput-y42uJ"},"selected":false,"width":384,"height":302,"positionAbsolute":{"x":3705.4168745041557,"y":767.0455813755043},"dragging":false},{"id":"OpenAIModel-WTeze","type":"genericNode","position":{"x":2073.624239322566,"y":1187.2680665207254},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"OpenAI API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"json_mode","value":false,"display_name":"JSON Mode","advanced":true,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool","_input_type":"BoolInput"},"max_tokens":{"trace_as_metadata":true,"range_spec":{"step_type":"float","min":0,"max":128000,"step":0.1},"list":false,"required":false,"placeholder":"","show":true,"name":"max_tokens","value":"","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int","_input_type":"IntInput"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"model_kwargs","value":{},"display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o-mini","gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"model_name","value":"gpt-4o-mini","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"openai_api_base","value":"","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str","_input_type":"StrInput"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"name":"output_schema","value":{},"display_name":"Schema","advanced":true,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict","_input_type":"DictInput"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"seed","value":1,"display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int","_input_type":"IntInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0.1,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput"}},"description":"Generates text using OpenAI LLMs.","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","system_message","stream","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","api_key","temperature","seed"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"OpenAIModel-WTeze"},"selected":false,"width":384,"height":605},{"id":"WikipediaAPI-1Uq4c","type":"genericNode","position":{"x":1198.5561749726946,"y":1115.8451480526692},"data":{"type":"WikipediaAPI","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import cast\nfrom langchain_community.tools import WikipediaQueryRun\nfrom langchain_community.utilities.wikipedia import WikipediaAPIWrapper\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.field_typing import Tool\nfrom langflow.inputs import BoolInput, IntInput, MessageTextInput, MultilineInput\nfrom langflow.schema import Data\n\n\nclass WikipediaAPIComponent(LCToolComponent):\n    display_name = \"Wikipedia API\"\n    description = \"Call Wikipedia API.\"\n    name = \"WikipediaAPI\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n        ),\n        MessageTextInput(name=\"lang\", display_name=\"Language\", value=\"en\"),\n        IntInput(name=\"k\", display_name=\"Number of results\", value=4, required=True),\n        BoolInput(name=\"load_all_available_meta\", display_name=\"Load all available meta\", value=False, advanced=True),\n        IntInput(\n            name=\"doc_content_chars_max\", display_name=\"Document content characters max\", value=4000, advanced=True\n        ),\n    ]\n\n    def run_model(self) -> list[Data]:\n        wrapper = self._build_wrapper()\n        docs = wrapper.load(self.input_value)\n        data = [Data.from_document(doc) for doc in docs]\n        self.status = data\n        return data\n\n    def build_tool(self) -> Tool:\n        wrapper = self._build_wrapper()\n        return cast(Tool, WikipediaQueryRun(api_wrapper=wrapper))\n\n    def _build_wrapper(self) -> WikipediaAPIWrapper:\n        return WikipediaAPIWrapper(  # type: ignore\n            top_k_results=self.k,\n            lang=self.lang,\n            load_all_available_meta=self.load_all_available_meta,\n            doc_content_chars_max=self.doc_content_chars_max,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"doc_content_chars_max":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"doc_content_chars_max","value":4000,"display_name":"Document content characters max","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MultilineInput"},"k":{"trace_as_metadata":true,"list":false,"required":true,"placeholder":"","show":true,"name":"k","value":4,"display_name":"Number of results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"lang":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"lang","value":"br","display_name":"Language","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"load_all_available_meta":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"load_all_available_meta","value":false,"display_name":"Load all available meta","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Call Wikipedia API.","base_classes":["Data","Tool"],"display_name":"Wikipedia API","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","lang","k","load_all_available_meta","doc_content_chars_max"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"WikipediaAPI-1Uq4c"},"selected":false,"width":384,"height":519},{"id":"ComposioAPI-M5X1s","type":"genericNode","position":{"x":1196.2626695896824,"y":456.85991811466647},"data":{"type":"ComposioAPI","node":{"template":{"_type":"Component","action_names":{"trace_as_metadata":true,"options":["YOUTUBE_LIST_CAPTION_TRACK","YOUTUBE_LIST_CHANNEL_VIDEOS","YOUTUBE_LIST_USER_PLAYLISTS","YOUTUBE_LIST_USER_SUBSCRIPTIONS","YOUTUBE_LOAD_CAPTIONS","YOUTUBE_SEARCH_YOU_TUBE","YOUTUBE_SUBSCRIBE_CHANNEL","YOUTUBE_UPDATE_THUMBNAIL","YOUTUBE_UPDATE_VIDEO","YOUTUBE_VIDEO_DETAILS"],"combobox":false,"list":true,"required":false,"placeholder":"","show":true,"name":"action_names","value":["YOUTUBE_LIST_CAPTION_TRACK","YOUTUBE_SEARCH_YOU_TUBE"],"display_name":"Actions to use","advanced":false,"dynamic":false,"info":"The actions to pass to agent to execute","title_case":false,"type":"str","_input_type":"MultiselectInput"},"api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"Composio API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key","refresh_button":true,"title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"app_names":{"trace_as_metadata":true,"options":["APALEO","APIFY","ASANA","ATTIO","BITBUCKET","BREVO","BROWSERBASE_TOOL","BROWSER_TOOL","CLICKUP","CODEINTERPRETER","CODE_FORMAT_TOOL","CODE_GREP_TOOL","CODE_INDEX_TOOL","CODE_MAP_TOOL","COMPOSIO","DISCORD","DROPBOX","ELEVENLABS","EMBED_TOOL","EXA","FIGMA","FILETOOL","FIRECRAWL","GIT","GITHUB","GITLAB","GMAIL","GOOGLECALENDAR","GOOGLEDOCS","GOOGLEDRIVE","GOOGLEMEET","GOOGLESHEETS","GOOGLETASKS","GREPTILE","HACKERNEWS","HEROKU","HISTORY_FETCHER","HUBSPOT","IMAGE_ANALYSER","INDUCED_AI","JIRA","KLAVIYO","LINEAR","LISTENNOTES","MATHEMATICAL","MULTIONAI","NASA","NOTION","OKTA","PAGERDUTY","PERPLEXITYAI","PIPEDRIVE","POSTHOG","RAGTOOL","SCHEDULER","SERPAPI","SHELLTOOL","SLACK","SLACKBOT","SNOWFLAKE","SOUNDCLOUD","SPIDERTOOL","SPLITWISE","SPOTIFY","SQLTOOL","STRAVA","TASKADE","TAVILY","TRELLO","TWILIO","TWITTER","TYPEFORM","WEATHERMAP","WEBTOOL","WHATSAPP","WORKABLE","WORKSPACE_TOOL","YOUSEARCH","YOUTUBE","ZENDESK","ZEPTOOL","ZOOM"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"app_names","value":"YOUTUBE","display_name":"App Name","advanced":false,"dynamic":false,"info":"The app name to use. Please refresh after selecting app name","refresh_button":true,"title_case":false,"type":"str","_input_type":"DropdownInput"},"auth_status_config":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"auth_status_config","value":"YOUTUBE CONNECTED","display_name":"Auth status","advanced":false,"dynamic":false,"info":"Open link or enter api key. Then refresh button","refresh_button":true,"title_case":false,"type":"str","_input_type":"StrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"entity_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"entity_id","value":"default","display_name":"Entity ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Use Composio toolset to run actions with your agent","icon":"Composio","base_classes":["Data","Tool"],"display_name":"Composio Tools","documentation":"https://docs.composio.dev","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["entity_id","api_key","app_names","action_names","auth_status_config"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ComposioAPI-M5X1s"},"selected":false,"width":384,"height":633},{"id":"ComposioAPI-zI5Y3","type":"genericNode","position":{"x":778.6134554836276,"y":280.99731851223225},"data":{"type":"ComposioAPI","node":{"template":{"_type":"Component","action_names":{"trace_as_metadata":true,"options":["SERPAPI_DUCK_DUCK_GO_SEARCH","SERPAPI_EVENT_SEARCH","SERPAPI_FINANCE_SEARCH","SERPAPI_GOOGLE_MAPS_SEARCH","SERPAPI_IMAGE_SEARCH","SERPAPI_NEWS_SEARCH","SERPAPI_SCHOLAR_SEARCH","SERPAPI_SEARCH","SERPAPI_SHOPPING_SEARCH","SERPAPI_TRENDS_SEARCH"],"combobox":false,"list":true,"required":false,"placeholder":"","show":true,"name":"action_names","value":["SERPAPI_DUCK_DUCK_GO_SEARCH"],"display_name":"Actions to use","advanced":false,"dynamic":false,"info":"The actions to pass to agent to execute","title_case":false,"type":"str","_input_type":"MultiselectInput"},"api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"Composio API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key","refresh_button":true,"title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"app_names":{"trace_as_metadata":true,"options":["APALEO","APIFY","ASANA","ATTIO","BITBUCKET","BREVO","BROWSERBASE_TOOL","BROWSER_TOOL","CLICKUP","CODEINTERPRETER","CODE_FORMAT_TOOL","CODE_GREP_TOOL","CODE_INDEX_TOOL","CODE_MAP_TOOL","COMPOSIO","DISCORD","DROPBOX","ELEVENLABS","EMBED_TOOL","EXA","FIGMA","FILETOOL","FIRECRAWL","GIT","GITHUB","GITLAB","GMAIL","GOOGLECALENDAR","GOOGLEDOCS","GOOGLEDRIVE","GOOGLEMEET","GOOGLESHEETS","GOOGLETASKS","GREPTILE","HACKERNEWS","HEROKU","HISTORY_FETCHER","HUBSPOT","IMAGE_ANALYSER","INDUCED_AI","JIRA","KLAVIYO","LINEAR","LISTENNOTES","MATHEMATICAL","MULTIONAI","NASA","NOTION","OKTA","PAGERDUTY","PERPLEXITYAI","PIPEDRIVE","POSTHOG","RAGTOOL","SCHEDULER","SERPAPI","SHELLTOOL","SLACK","SLACKBOT","SNOWFLAKE","SOUNDCLOUD","SPIDERTOOL","SPLITWISE","SPOTIFY","SQLTOOL","STRAVA","TASKADE","TAVILY","TRELLO","TWILIO","TWITTER","TYPEFORM","WEATHERMAP","WEBTOOL","WHATSAPP","WORKABLE","WORKSPACE_TOOL","YOUSEARCH","YOUTUBE","ZENDESK","ZEPTOOL","ZOOM"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"app_names","value":"SERPAPI","display_name":"App Name","advanced":false,"dynamic":false,"info":"The app name to use. Please refresh after selecting app name","refresh_button":true,"title_case":false,"type":"str","_input_type":"DropdownInput"},"auth_status_config":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"auth_status_config","value":"SERPAPI CONNECTED","display_name":"Auth status","advanced":false,"dynamic":false,"info":"Open link or enter api key. Then refresh button","refresh_button":true,"title_case":false,"type":"str","_input_type":"StrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"entity_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"entity_id","value":"default","display_name":"Entity ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Use Composio toolset to run actions with your agent","icon":"Composio","base_classes":["Data","Tool"],"display_name":"Composio Tools","documentation":"https://docs.composio.dev","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["entity_id","api_key","app_names","action_names","auth_status_config"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ComposioAPI-zI5Y3"},"selected":false,"width":384,"height":633},{"id":"ComposioAPI-CqcBn","type":"genericNode","position":{"x":773.1329679161861,"y":943.7128977668867},"data":{"type":"ComposioAPI","node":{"template":{"_type":"Component","action_names":{"trace_as_metadata":true,"options":["GMAIL_ADD_LABEL_TO_EMAIL","GMAIL_CREATE_EMAIL_DRAFT","GMAIL_CREATE_LABEL","GMAIL_FETCH_EMAILS","GMAIL_FETCH_MESSAGE_BY_THREAD_ID","GMAIL_GET_ATTACHMENT","GMAIL_LIST_LABELS","GMAIL_LIST_THREADS","GMAIL_REPLY_TO_THREAD","GMAIL_SEND_EMAIL"],"combobox":false,"list":true,"required":false,"placeholder":"","show":true,"name":"action_names","value":["GMAIL_ADD_LABEL_TO_EMAIL","GMAIL_FETCH_EMAILS","GMAIL_SEND_EMAIL"],"display_name":"Actions to use","advanced":false,"dynamic":false,"info":"The actions to pass to agent to execute","title_case":false,"type":"str","_input_type":"MultiselectInput"},"api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"Composio API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key","refresh_button":true,"title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"app_names":{"trace_as_metadata":true,"options":["APALEO","APIFY","ASANA","ATTIO","BITBUCKET","BREVO","BROWSERBASE_TOOL","BROWSER_TOOL","CLICKUP","CODEINTERPRETER","CODE_FORMAT_TOOL","CODE_GREP_TOOL","CODE_INDEX_TOOL","CODE_MAP_TOOL","COMPOSIO","DISCORD","DROPBOX","ELEVENLABS","EMBED_TOOL","EXA","FIGMA","FILETOOL","FIRECRAWL","GIT","GITHUB","GITLAB","GMAIL","GOOGLECALENDAR","GOOGLEDOCS","GOOGLEDRIVE","GOOGLEMEET","GOOGLESHEETS","GOOGLETASKS","GREPTILE","HACKERNEWS","HEROKU","HISTORY_FETCHER","HUBSPOT","IMAGE_ANALYSER","INDUCED_AI","JIRA","KLAVIYO","LINEAR","LISTENNOTES","MATHEMATICAL","MULTIONAI","NASA","NOTION","OKTA","PAGERDUTY","PERPLEXITYAI","PIPEDRIVE","POSTHOG","RAGTOOL","SCHEDULER","SERPAPI","SHELLTOOL","SLACK","SLACKBOT","SNOWFLAKE","SOUNDCLOUD","SPIDERTOOL","SPLITWISE","SPOTIFY","SQLTOOL","STRAVA","TASKADE","TAVILY","TRELLO","TWILIO","TWITTER","TYPEFORM","WEATHERMAP","WEBTOOL","WHATSAPP","WORKABLE","WORKSPACE_TOOL","YOUSEARCH","YOUTUBE","ZENDESK","ZEPTOOL","ZOOM"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"app_names","value":"GMAIL","display_name":"App Name","advanced":false,"dynamic":false,"info":"The app name to use. Please refresh after selecting app name","refresh_button":true,"title_case":false,"type":"str","_input_type":"DropdownInput"},"auth_status_config":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"auth_status_config","value":"GMAIL CONNECTED","display_name":"Auth status","advanced":false,"dynamic":false,"info":"Open link or enter api key. Then refresh button","refresh_button":true,"title_case":false,"type":"str","_input_type":"StrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Sequence\n\nfrom composio_langchain import Action, App, ComposioToolSet  # type: ignore\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            refresh_button=True,\n            info=\"Refer to https://docs.composio.dev/introduction/foundations/howtos/get_api_key\",\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[app_name for app_name in App.__annotations__],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=False,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n        ),\n        StrInput(\n            name=\"auth_status_config\",\n            display_name=\"Auth status\",\n            value=\"\",\n            refresh_button=True,\n            info=\"Open link or enter api key. Then refresh button\",\n        ),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"\n        Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            entity.get_connection(app=app)\n            return f\"{app} CONNECTED\"\n        except Exception:\n            return self._handle_authorization_failure(toolset, entity, app)\n\n    def _handle_authorization_failure(self, toolset: ComposioToolSet, entity: Any, app: str) -> str:\n        \"\"\"\n        Handles the authorization failure by attempting to process API key auth or initiate default connection.\n\n        Args:\n            toolset (ComposioToolSet): The toolset instance.\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The result of the authorization failure message.\n        \"\"\"\n        try:\n            auth_schemes = toolset.client.apps.get(app).auth_schemes\n            if auth_schemes[0].auth_mode == \"API_KEY\":\n                return self._process_api_key_auth(entity, app)\n            else:\n                return self._initiate_default_connection(entity, app)\n        except Exception as exc:\n            logger.error(f\"Authorization error: {str(exc)}\")\n            return \"Error\"\n\n    def _process_api_key_auth(self, entity: Any, app: str) -> str:\n        \"\"\"\n        Processes the API key authentication.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n\n        Returns:\n            str: The status of the API key authentication.\n        \"\"\"\n        auth_status_config = self.auth_status_config\n        is_url = \"http\" in auth_status_config or \"https\" in auth_status_config\n        is_different_app = \"CONNECTED\" in auth_status_config and app not in auth_status_config\n        is_default_api_key_message = \"API Key\" in auth_status_config\n\n        if is_different_app or is_url or is_default_api_key_message:\n            return \"Enter API Key\"\n        else:\n            if not is_default_api_key_message:\n                entity.initiate_connection(\n                    app_name=app,\n                    auth_mode=\"API_KEY\",\n                    auth_config={\"api_key\": self.auth_status_config},\n                    use_composio_auth=False,\n                    force_new_integration=True,\n                )\n                return f\"{app} CONNECTED\"\n            else:\n                return \"Enter API Key\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list(set(connection.appUniqueId for connection in connections))\n\n    def _update_app_names_with_connected_status(self, build_config: dict) -> dict:\n        connected_app_names = self._get_connected_app_names_for_entity()\n\n        app_names = [\n            f\"{app_name}_CONNECTED\" for app_name in App.__annotations__ if app_name.lower() in connected_app_names\n        ]\n        non_connected_app_names = [\n            app_name for app_name in App.__annotations__ if app_name.lower() not in connected_app_names\n        ]\n        build_config[\"app_names\"][\"options\"] = app_names + non_connected_app_names\n        build_config[\"app_names\"][\"value\"] = app_names[0] if app_names else \"\"\n        return build_config\n\n    def _get_normalized_app_name(self) -> str:\n        return self.app_names.replace(\"_CONNECTED\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name == \"api_key\":\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config = self._update_app_names_with_connected_status(build_config)\n            return build_config\n\n        if field_name in {\"app_names\", \"auth_status_config\"}:\n            if hasattr(self, \"api_key\") and self.api_key != \"\":\n                build_config[\"auth_status_config\"][\"value\"] = self._check_for_authorization(\n                    self._get_normalized_app_name()\n                )\n            all_action_names = [action_name for action_name in Action.__annotations__]\n            app_action_names = [\n                action_name\n                for action_name in all_action_names\n                if action_name.lower().startswith(self._get_normalized_app_name().lower() + \"_\")\n            ]\n            build_config[\"action_names\"][\"options\"] = app_action_names\n            build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        composio_toolset = self._build_wrapper()\n        composio_tools = composio_toolset.get_tools(actions=self.action_names)\n        return composio_tools\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        return ComposioToolSet(api_key=self.api_key)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"entity_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"entity_id","value":"default","display_name":"Entity ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Use Composio toolset to run actions with your agent","icon":"Composio","base_classes":["Data","Tool"],"display_name":"Composio Tools","documentation":"https://docs.composio.dev","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"api_run_model","display_name":"Data","method":"run_model","value":"__UNDEFINED__","cache":true},{"types":["Tool"],"selected":"Tool","name":"api_build_tool","display_name":"Tool","method":"build_tool","value":"__UNDEFINED__","cache":true}],"field_order":["entity_id","api_key","app_names","action_names","auth_status_config"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ComposioAPI-CqcBn"},"selected":false,"width":384,"height":633},{"id":"Memory-tcSkV","type":"genericNode","position":{"x":2516.806397159164,"y":1317.4913017136846},"data":{"type":"Memory","node":{"base_classes":["BaseChatMemory","Data","Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Retrieves stored chat messages from Langflow tables or an external memory.","display_name":"Chat Memory","documentation":"","edited":false,"field_order":["memory","sender","sender_name","n_messages","session_id","order","template"],"frozen":false,"icon":"message-square-more","output_types":[],"outputs":[{"cache":true,"display_name":"Messages (Data)","method":"retrieve_messages","name":"messages","selected":"Data","types":["Data"],"value":"__UNDEFINED__"},{"cache":true,"display_name":"Messages (Text)","method":"retrieve_messages_as_text","name":"messages_text","selected":"Message","types":["Message"],"value":"__UNDEFINED__"},{"cache":true,"display_name":"Memory","method":"build_lc_memory","name":"lc_memory","selected":"BaseChatMemory","types":["BaseChatMemory"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langchain.memory import ConversationBufferMemory\n\nfrom langflow.custom import Component\nfrom langflow.field_typing import BaseChatMemory\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import LCBuiltinChatMemory, get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n"},"memory":{"advanced":false,"display_name":"External Memory","dynamic":false,"info":"Retrieve messages from an external memory. If empty, it will use the Langflow tables.","input_types":["BaseChatMessageHistory"],"list":false,"name":"memory","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"other","value":""},"n_messages":{"advanced":false,"display_name":"Number of Messages","dynamic":false,"info":"Number of messages to retrieve.","list":false,"name":"n_messages","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":100},"order":{"advanced":true,"display_name":"Order","dynamic":false,"info":"Order of the messages.","name":"order","options":["Ascending","Descending"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Ascending"},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Filter by sender type.","name":"sender","options":["Machine","User","Machine and User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Machine and User"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Filter by sender name.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"template":{"advanced":true,"display_name":"Template","dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{sender_name}: {text}"}},"lf_version":"1.0.18","official":false},"id":"Memory-tcSkV"},"selected":false,"width":384,"height":468,"positionAbsolute":{"x":2516.806397159164,"y":1317.4913017136846},"dragging":false}],"edges":[{"source":"ComposioAPI-WfTao","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-WfTaoœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","id":"reactflow__edge-ComposioAPI-WfTao{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-WfTaoœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-LmeiW","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"ComposioAPI","id":"ComposioAPI-WfTao","name":"api_build_tool","output_types":["Tool"]}},"selected":false,"className":""},{"source":"Prompt-aktgV","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-aktgVœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œsystem_promptœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","id":"reactflow__edge-Prompt-aktgV{œdataTypeœ:œPromptœ,œidœ:œPrompt-aktgVœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œsystem_promptœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"system_prompt","id":"ToolCallingAgent-LmeiW","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-aktgV","name":"prompt","output_types":["Message"]}},"selected":false,"className":""},{"source":"ChatInput-PUigP","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-PUigPœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","id":"reactflow__edge-ChatInput-PUigP{œdataTypeœ:œChatInputœ,œidœ:œChatInput-PUigPœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œinput_valueœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ToolCallingAgent-LmeiW","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-PUigP","name":"message","output_types":["Message"]}},"selected":false,"className":""},{"source":"OpenAIModel-WTeze","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-WTezeœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","id":"reactflow__edge-OpenAIModel-WTeze{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-WTezeœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œllmœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"llm","id":"ToolCallingAgent-LmeiW","inputTypes":["LanguageModel"],"type":"other"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-WTeze","name":"model_output","output_types":["LanguageModel"]}},"selected":false,"className":""},{"source":"WikipediaAPI-1Uq4c","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œWikipediaAPIœ,œidœ:œWikipediaAPI-1Uq4cœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","id":"reactflow__edge-WikipediaAPI-1Uq4c{œdataTypeœ:œWikipediaAPIœ,œidœ:œWikipediaAPI-1Uq4cœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-LmeiW","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"WikipediaAPI","id":"WikipediaAPI-1Uq4c","name":"api_build_tool","output_types":["Tool"]}},"selected":false,"className":""},{"source":"ComposioAPI-M5X1s","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-M5X1sœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","id":"reactflow__edge-ComposioAPI-M5X1s{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-M5X1sœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-LmeiW","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"ComposioAPI","id":"ComposioAPI-M5X1s","name":"api_build_tool","output_types":["Tool"]}},"selected":false,"className":""},{"source":"ComposioAPI-CqcBn","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-CqcBnœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","id":"reactflow__edge-ComposioAPI-CqcBn{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-CqcBnœ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-LmeiW","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"ComposioAPI","id":"ComposioAPI-CqcBn","name":"api_build_tool","output_types":["Tool"]}},"selected":false,"className":""},{"source":"ComposioAPI-zI5Y3","target":"ToolCallingAgent-LmeiW","sourceHandle":"{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-zI5Y3œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}","targetHandle":"{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","id":"reactflow__edge-ComposioAPI-zI5Y3{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-zI5Y3œ,œnameœ:œapi_build_toolœ,œoutput_typesœ:[œToolœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œtoolsœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œToolœ,œBaseToolœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"tools","id":"ToolCallingAgent-LmeiW","inputTypes":["Tool","BaseTool"],"type":"other"},"sourceHandle":{"dataType":"ComposioAPI","id":"ComposioAPI-zI5Y3","name":"api_build_tool","output_types":["Tool"]}},"selected":false,"className":""},{"source":"ToolCallingAgent-LmeiW","target":"ChatOutput-y42uJ","sourceHandle":"{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-LmeiWœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-y42uJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","id":"reactflow__edge-ToolCallingAgent-LmeiW{œdataTypeœ:œToolCallingAgentœ,œidœ:œToolCallingAgent-LmeiWœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-y42uJ{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-y42uJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-y42uJ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ToolCallingAgent","id":"ToolCallingAgent-LmeiW","name":"response","output_types":["Message"]}},"selected":false,"className":""},{"source":"Memory-tcSkV","sourceHandle":"{œdataTypeœ:œMemoryœ,œidœ:œMemory-tcSkVœ,œnameœ:œmessagesœ,œoutput_typesœ:[œDataœ]}","target":"ToolCallingAgent-LmeiW","targetHandle":"{œfieldNameœ:œchat_historyœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"chat_history","id":"ToolCallingAgent-LmeiW","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"Memory","id":"Memory-tcSkV","name":"messages","output_types":["Data"]}},"id":"reactflow__edge-Memory-tcSkV{œdataTypeœ:œMemoryœ,œidœ:œMemory-tcSkVœ,œnameœ:œmessagesœ,œoutput_typesœ:[œDataœ]}-ToolCallingAgent-LmeiW{œfieldNameœ:œchat_historyœ,œidœ:œToolCallingAgent-LmeiWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"}],"viewport":{"x":-951.0974028820406,"y":-487.615710119062,"zoom":0.9963732049165384}},"description":"Catalyzing Business Growth through Conversational AI.","name":"SenseFlow","last_tested_version":"1.0.18","endpoint_name":null,"is_component":false}